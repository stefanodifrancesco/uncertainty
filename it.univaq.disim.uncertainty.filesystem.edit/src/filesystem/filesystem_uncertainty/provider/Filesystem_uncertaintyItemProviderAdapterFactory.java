/**
 */
package filesystem.filesystem_uncertainty.provider;

import filesystem.filesystem_uncertainty.util.Filesystem_uncertaintyAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Filesystem_uncertaintyItemProviderAdapterFactory extends Filesystem_uncertaintyAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Filesystem_uncertaintyItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link filesystem.filesystem_uncertainty.aFilesystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected aFilesystemItemProvider aFilesystemItemProvider;

	/**
	 * This creates an adapter for a {@link filesystem.filesystem_uncertainty.aFilesystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createaFilesystemAdapter() {
		if (aFilesystemItemProvider == null) {
			aFilesystemItemProvider = new aFilesystemItemProvider(this);
		}

		return aFilesystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link filesystem.filesystem_uncertainty.uFilesystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected uFilesystemItemProvider uFilesystemItemProvider;

	/**
	 * This creates an adapter for a {@link filesystem.filesystem_uncertainty.uFilesystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createuFilesystemAdapter() {
		if (uFilesystemItemProvider == null) {
			uFilesystemItemProvider = new uFilesystemItemProvider(this);
		}

		return uFilesystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link filesystem.filesystem_uncertainty.aFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected aFileItemProvider aFileItemProvider;

	/**
	 * This creates an adapter for a {@link filesystem.filesystem_uncertainty.aFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createaFileAdapter() {
		if (aFileItemProvider == null) {
			aFileItemProvider = new aFileItemProvider(this);
		}

		return aFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link filesystem.filesystem_uncertainty.uFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected uFileItemProvider uFileItemProvider;

	/**
	 * This creates an adapter for a {@link filesystem.filesystem_uncertainty.uFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createuFileAdapter() {
		if (uFileItemProvider == null) {
			uFileItemProvider = new uFileItemProvider(this);
		}

		return uFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link filesystem.filesystem_uncertainty.aSync} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected aSyncItemProvider aSyncItemProvider;

	/**
	 * This creates an adapter for a {@link filesystem.filesystem_uncertainty.aSync}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createaSyncAdapter() {
		if (aSyncItemProvider == null) {
			aSyncItemProvider = new aSyncItemProvider(this);
		}

		return aSyncItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link filesystem.filesystem_uncertainty.uSync} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected uSyncItemProvider uSyncItemProvider;

	/**
	 * This creates an adapter for a {@link filesystem.filesystem_uncertainty.uSync}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createuSyncAdapter() {
		if (uSyncItemProvider == null) {
			uSyncItemProvider = new uSyncItemProvider(this);
		}

		return uSyncItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link filesystem.filesystem_uncertainty.aShortcut} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected aShortcutItemProvider aShortcutItemProvider;

	/**
	 * This creates an adapter for a {@link filesystem.filesystem_uncertainty.aShortcut}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createaShortcutAdapter() {
		if (aShortcutItemProvider == null) {
			aShortcutItemProvider = new aShortcutItemProvider(this);
		}

		return aShortcutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link filesystem.filesystem_uncertainty.uShortcut} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected uShortcutItemProvider uShortcutItemProvider;

	/**
	 * This creates an adapter for a {@link filesystem.filesystem_uncertainty.uShortcut}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createuShortcutAdapter() {
		if (uShortcutItemProvider == null) {
			uShortcutItemProvider = new uShortcutItemProvider(this);
		}

		return uShortcutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link filesystem.filesystem_uncertainty.aFolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected aFolderItemProvider aFolderItemProvider;

	/**
	 * This creates an adapter for a {@link filesystem.filesystem_uncertainty.aFolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createaFolderAdapter() {
		if (aFolderItemProvider == null) {
			aFolderItemProvider = new aFolderItemProvider(this);
		}

		return aFolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link filesystem.filesystem_uncertainty.aDrive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected aDriveItemProvider aDriveItemProvider;

	/**
	 * This creates an adapter for a {@link filesystem.filesystem_uncertainty.aDrive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createaDriveAdapter() {
		if (aDriveItemProvider == null) {
			aDriveItemProvider = new aDriveItemProvider(this);
		}

		return aDriveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link filesystem.filesystem_uncertainty.uFolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected uFolderItemProvider uFolderItemProvider;

	/**
	 * This creates an adapter for a {@link filesystem.filesystem_uncertainty.uFolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createuFolderAdapter() {
		if (uFolderItemProvider == null) {
			uFolderItemProvider = new uFolderItemProvider(this);
		}

		return uFolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link filesystem.filesystem_uncertainty.uDrive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected uDriveItemProvider uDriveItemProvider;

	/**
	 * This creates an adapter for a {@link filesystem.filesystem_uncertainty.uDrive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createuDriveAdapter() {
		if (uDriveItemProvider == null) {
			uDriveItemProvider = new uDriveItemProvider(this);
		}

		return uDriveItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (aFilesystemItemProvider != null) aFilesystemItemProvider.dispose();
		if (uFilesystemItemProvider != null) uFilesystemItemProvider.dispose();
		if (aFileItemProvider != null) aFileItemProvider.dispose();
		if (uFileItemProvider != null) uFileItemProvider.dispose();
		if (aSyncItemProvider != null) aSyncItemProvider.dispose();
		if (uSyncItemProvider != null) uSyncItemProvider.dispose();
		if (aShortcutItemProvider != null) aShortcutItemProvider.dispose();
		if (uShortcutItemProvider != null) uShortcutItemProvider.dispose();
		if (aFolderItemProvider != null) aFolderItemProvider.dispose();
		if (aDriveItemProvider != null) aDriveItemProvider.dispose();
		if (uFolderItemProvider != null) uFolderItemProvider.dispose();
		if (uDriveItemProvider != null) uDriveItemProvider.dispose();
	}

}
