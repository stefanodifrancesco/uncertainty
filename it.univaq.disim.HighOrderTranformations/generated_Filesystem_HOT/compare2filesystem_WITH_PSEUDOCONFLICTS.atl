-- @nsURI compareMM=http://www.eclipse.org/emf/compare

module compare2Ufilesystem;
create OUT : UfilesystemMM from IN : compareMM;






helper def : getDrive_name (DriveMatch : compareMM!Match, attributes_changes : Sequence(compareMM!AttributeChange)) : String =
	if ( not (attributes_changes ->select(e | e.attribute.name = 'name')).isEmpty() )
						then if ( (attributes_changes ->select(e | e.attribute.name = 'name')).first().source = #LEFT )
								then DriveMatch.left.name
								else DriveMatch.right.name
								endif
						else DriveMatch.origin.name endif;



helper def : getFolder_name (FolderMatch : compareMM!Match, attributes_changes : Sequence(compareMM!AttributeChange)) : String =
	if ( not (attributes_changes ->select(e | e.attribute.name = 'name')).isEmpty() )
						then if ( (attributes_changes ->select(e | e.attribute.name = 'name')).first().source = #LEFT )
								then FolderMatch.left.name
								else FolderMatch.right.name
								endif
						else FolderMatch.origin.name endif;



helper def : getShortcut_name (ShortcutMatch : compareMM!Match, attributes_changes : Sequence(compareMM!AttributeChange)) : String =
	if ( not (attributes_changes ->select(e | e.attribute.name = 'name')).isEmpty() )
						then if ( (attributes_changes ->select(e | e.attribute.name = 'name')).first().source = #LEFT )
								then ShortcutMatch.left.name
								else ShortcutMatch.right.name
								endif
						else ShortcutMatch.origin.name endif;








helper def : getFile_name (FileMatch : compareMM!Match, attributes_changes : Sequence(compareMM!AttributeChange)) : String =
	if ( not (attributes_changes ->select(e | e.attribute.name = 'name')).isEmpty() )
						then if ( (attributes_changes ->select(e | e.attribute.name = 'name')).first().source = #LEFT )
								then FileMatch.left.name
								else FileMatch.right.name
								endif
						else FileMatch.origin.name endif;





rule rootMatch2Filesystem {
	from
		m: compareMM!Match (
				not m.origin.oclIsUndefined() 
			and not m.right.oclIsUndefined() 
			and not m.left.oclIsUndefined() 
			and m.origin.oclIsTypeOf(UfilesystemMM!"filesystem::Filesystem")
		)
	using {		
			attributes_changes   : compareMM!AttributeChange = m.differences ->select(e | e.oclIsTypeOf(compareMM!AttributeChange));
			reference_changes    : compareMM!ReferenceChange = m.differences ->select(e | e.oclIsTypeOf(compareMM!ReferenceChange));
			noContainmentReferences : compareMM!ReferenceChange = m.differences ->select(e | e.oclIsTypeOf(compareMM!ReferenceChange))->select(e | e.reference.containment = false);


			drives_submatch : compareMM!Match = m.submatches  ->select(e | m.origin.drives.includes(e.origin));
			syncs_submatch : compareMM!Match = m.submatches  ->select(e | m.origin.syncs.includes(e.origin));

			drives_ref_changes : compareMM!ReferenceChange = reference_changes ->select(e | e.reference.name = 'drives');
			syncs_ref_changes : compareMM!ReferenceChange = reference_changes ->select(e | e.reference.name = 'syncs');

			
			drives_attr_conflict : compareMM!Conflict = (drives_submatch ->collect(sm | sm.differences)->flatten()->select(e | e.oclIsTypeOf(compareMM!AttributeChange))->collect(e | e.conflict) )->select(e | not e.oclIsUndefined());
			syncs_attr_conflict : compareMM!Conflict = (syncs_submatch ->collect(sm | sm.differences)->flatten()->select(e | e.oclIsTypeOf(compareMM!AttributeChange))->collect(e | e.conflict) )->select(e | not e.oclIsUndefined());
			
			conflicting_drives : compareMM!Conflict = (reference_changes ->select(e | e.reference.name = 'drives')) ->collect(e | e.conflict);
			conflicting_syncs : compareMM!Conflict = (reference_changes ->select(e | e.reference.name = 'syncs')) ->collect(e | e.conflict);
	}
	to
		f: UfilesystemMM!"filesystem::Filesystem" (
			drives <- drives_submatch.append(drives_ref_changes).append(drives_attr_conflict).append(conflicting_drives),
			syncs <- syncs_submatch.append(syncs_ref_changes).append(syncs_attr_conflict).append(conflicting_syncs)			
		)
}


rule Drive_Match2Drive {
	from
		m: compareMM!Match (
				not m.origin.oclIsUndefined() 
			and not m.right.oclIsUndefined() 
			and not m.left.oclIsUndefined() 
			and m.origin.oclIsTypeOf(UfilesystemMM!"filesystem::Drive")
			and m.differences.isEmpty()
		)
	using {
			contents_submatch : compareMM!Match = m.submatches  ->select(e | m.origin.contents.includes(e.origin));

			contents_attr_conflict : compareMM!Conflict = (contents_submatch ->collect(sm | sm.differences)->flatten()->select(e | e.oclIsTypeOf(compareMM!AttributeChange))->collect(e | e.conflict) )->select(e | not e.oclIsUndefined());

	}
	to
		conservative_Drive: UfilesystemMM!Drive (
			name <- m.origin.name,

			contents <- contents_submatch.append(contents_attr_conflict)
		)
}

rule Drive_Match2Drive_without_subconflicts {
	from
		m: compareMM!Match (
				not m.origin.oclIsUndefined() 
			and not m.right.oclIsUndefined() 
			and not m.left.oclIsUndefined() 
			and m.origin.oclIsTypeOf(UfilesystemMM!"filesystem::Drive")
			and not m.differences.isEmpty()
			and if (m.differences ->collect(e | e.conflict)->select(i | not i.oclIsUndefined()).isEmpty()) -- no sub-conflicts on containment relations and on attribute changes
					then true 
					else not (m.differences ->collect(e | e.conflict)
								->select(i | not i.oclIsUndefined())
								->select(e | e.differences.oclIsTypeOf(compareMM!ReferenceChange))
								->exists(i | i.differences.first().reference.containment = true) or not m.differences ->collect(e | e.conflict)
																										->select(i | not i.oclIsUndefined())
																										->select(e | e.differences.first().oclIsTypeOf(compareMM!AttributeChange)).isEmpty())
					endif
		)
	using {		
			attributes_changes   : compareMM!AttributeChange = m.differences ->select(e | e.oclIsTypeOf(compareMM!AttributeChange));
			reference_changes    : compareMM!ReferenceChange = m.differences ->select(e | e.oclIsTypeOf(compareMM!ReferenceChange));
			noContainmentReferences : compareMM!ReferenceChange = m.differences ->select(e | e.oclIsTypeOf(compareMM!ReferenceChange))->select(e | e.reference.containment = false);


			contents_submatch : compareMM!Match = m.submatches  ->select(e | m.origin.contents.includes(e.origin));

			contents_ref_changes : compareMM!ReferenceChange = reference_changes ->select(e | e.reference.name = 'contents');
			
			contents_attr_conflict : compareMM!Conflict = (contents_submatch ->collect(sm | sm.differences)->flatten()->select(e | e.oclIsTypeOf(compareMM!AttributeChange))->collect(e | e.conflict) )->select(e | not e.oclIsUndefined());
			
			conflicting_contents : compareMM!Conflict = (reference_changes ->select(e | e.reference.name = 'contents')) ->collect(e | e.conflict);
	}
	to
		conservative_Drive: UfilesystemMM!"filesystem::Drive" (
			name <- thisModule.getDrive_name(m, attributes_changes),

			contents <- contents_submatch.append(contents_ref_changes).append(contents_attr_conflict).append(conflicting_contents)
		)
}

rule real_referenceChange2Drive {
	from 
		rf: compareMM!ReferenceChange (
			rf.value.oclIsTypeOf(UfilesystemMM!"filesystem::Drive") 
			and if (not rf.conflict.oclIsUndefined()) then rf.conflict.kind = #REAL else false endif
			and if (not rf.conflict.oclIsUndefined() and not rf.requires.isEmpty()) 
					then if (not rf.requires.first().conflict.oclIsUndefined())
						then rf.requires.first().conflict.kind = #REAL else true endif else true endif
		)
	to
		Drive_ref: UfilesystemMM!"filesystem::Drive" (
			name <- rf.value.name,

			contents <- (rf.requiredBy ->select(e | e.reference.name = 'contents'))			
		)
}

rule referenceChange2Drive {
	from 
		rf: compareMM!ReferenceChange (
			rf.value.oclIsTypeOf(UfilesystemMM!"filesystem::Drive") 
			and rf.conflict.oclIsUndefined() and rf.equivalence.oclIsUndefined() and rf.reference.containment = true and rf.kind = #ADD
		)
	using {		
	}
	to
		Drive_ref: UfilesystemMM!"filesystem::Drive" (
			name <- rf.value.name,

			contents <- (rf.requiredBy ->select(e | e.reference.name = 'contents'))
		)
}

rule conflictingDrive2uDrive {
	from
		cf: compareMM!Conflict (
			cf.differences.first().value.oclIsTypeOf(UfilesystemMM!Drive) 
			and cf.kind = #REAL
			and if (not cf.differences.first().requires.isEmpty()) 
					then if (not cf.differences.first().requires.first().conflict.oclIsUndefined())
						then cf.differences.first().requires.first().conflict.kind = #REAL else true endif else true endif
		)
	to
		conflicting_Drive: UfilesystemMM!uDrive (
			uleft <- (cf.differences ->select(e | e.source = #LEFT)),
			uright <- (cf.differences ->select(e | e.source = #RIGHT))
		)
}

rule conflictingAttributes2uDrive {
	from
		cf: compareMM!Conflict (
			cf.differences.first().oclIsTypeOf(compareMM!AttributeChange) 
			and cf.kind = #REAL
			and if (not cf.differences.first().refImmediateComposite().left.oclIsUndefined())
				then cf.differences.first().refImmediateComposite().left.oclIsTypeOf(UfilesystemMM!"filesystem::Drive")
				else cf.differences.first().refImmediateComposite().right.oclIsTypeOf(UfilesystemMM!"filesystem::Drive")
				endif
		)
	to
		Drive_attr_conflict: UfilesystemMM!uDrive (
			uleft <- (cf.differences ->select(e | e.source = #LEFT)),
			uright <- (cf.differences ->select(e | e.source = #RIGHT))
		)
}

rule attributeChange2uDrive {
	from 
		ac: compareMM!AttributeChange ( 
				not ac.conflict.oclIsUndefined() 
				and (if (ac.source = #LEFT) 
						then ac.refImmediateComposite().left.oclIsTypeOf(UfilesystemMM!"filesystem::Drive") 
						else ac.refImmediateComposite().right.oclIsTypeOf(UfilesystemMM!"filesystem::Drive") 
						endif) 
		)
	to
		m: UfilesystemMM!"filesystem::Drive" (
			name <- if (ac.source = #LEFT) then ac.refImmediateComposite().left.name else ac.refImmediateComposite().right.name endif
		)
}



rule Folder_Match2Folder {
	from
		m: compareMM!Match (
				not m.origin.oclIsUndefined() 
			and not m.right.oclIsUndefined() 
			and not m.left.oclIsUndefined() 
			and m.origin.oclIsTypeOf(UfilesystemMM!"filesystem::Folder")
			and m.differences.isEmpty()
		)
	using {
			contents_submatch : compareMM!Match = m.submatches  ->select(e | m.origin.contents.includes(e.origin));

			contents_attr_conflict : compareMM!Conflict = (contents_submatch ->collect(sm | sm.differences)->flatten()->select(e | e.oclIsTypeOf(compareMM!AttributeChange))->collect(e | e.conflict) )->select(e | not e.oclIsUndefined());

	}
	to
		conservative_Folder: UfilesystemMM!Folder (
			name <- m.origin.name,

			contents <- contents_submatch.append(contents_attr_conflict)
		)
}

rule Folder_Match2Folder_without_subconflicts {
	from
		m: compareMM!Match (
				not m.origin.oclIsUndefined() 
			and not m.right.oclIsUndefined() 
			and not m.left.oclIsUndefined() 
			and m.origin.oclIsTypeOf(UfilesystemMM!"filesystem::Folder")
			and not m.differences.isEmpty()
			and if (m.differences ->collect(e | e.conflict)->select(i | not i.oclIsUndefined()).isEmpty()) -- no sub-conflicts on containment relations and on attribute changes
					then true 
					else not (m.differences ->collect(e | e.conflict)
								->select(i | not i.oclIsUndefined())
								->select(e | e.differences.oclIsTypeOf(compareMM!ReferenceChange))
								->exists(i | i.differences.first().reference.containment = true) or not m.differences ->collect(e | e.conflict)
																										->select(i | not i.oclIsUndefined())
																										->select(e | e.differences.first().oclIsTypeOf(compareMM!AttributeChange)).isEmpty())
					endif
		)
	using {		
			attributes_changes   : compareMM!AttributeChange = m.differences ->select(e | e.oclIsTypeOf(compareMM!AttributeChange));
			reference_changes    : compareMM!ReferenceChange = m.differences ->select(e | e.oclIsTypeOf(compareMM!ReferenceChange));
			noContainmentReferences : compareMM!ReferenceChange = m.differences ->select(e | e.oclIsTypeOf(compareMM!ReferenceChange))->select(e | e.reference.containment = false);


			contents_submatch : compareMM!Match = m.submatches  ->select(e | m.origin.contents.includes(e.origin));

			contents_ref_changes : compareMM!ReferenceChange = reference_changes ->select(e | e.reference.name = 'contents');
			
			contents_attr_conflict : compareMM!Conflict = (contents_submatch ->collect(sm | sm.differences)->flatten()->select(e | e.oclIsTypeOf(compareMM!AttributeChange))->collect(e | e.conflict) )->select(e | not e.oclIsUndefined());
			
			conflicting_contents : compareMM!Conflict = (reference_changes ->select(e | e.reference.name = 'contents')) ->collect(e | e.conflict);
	}
	to
		conservative_Folder: UfilesystemMM!"filesystem::Folder" (
			name <- thisModule.getFolder_name(m, attributes_changes),

			contents <- contents_submatch.append(contents_ref_changes).append(contents_attr_conflict).append(conflicting_contents)
		)
}

rule real_referenceChange2Folder {
	from 
		rf: compareMM!ReferenceChange (
			rf.value.oclIsTypeOf(UfilesystemMM!"filesystem::Folder") 
			and if (not rf.conflict.oclIsUndefined()) then rf.conflict.kind = #REAL else false endif
			and if (not rf.conflict.oclIsUndefined() and not rf.requires.isEmpty()) 
					then if (not rf.requires.first().conflict.oclIsUndefined())
						then rf.requires.first().conflict.kind = #REAL else true endif else true endif
		)
	to
		Folder_ref: UfilesystemMM!"filesystem::Folder" (
			name <- rf.value.name,

			contents <- (rf.requiredBy ->select(e | e.reference.name = 'contents'))			
		)
}

rule referenceChange2Folder {
	from 
		rf: compareMM!ReferenceChange (
			rf.value.oclIsTypeOf(UfilesystemMM!"filesystem::Folder") 
			and rf.conflict.oclIsUndefined() and rf.equivalence.oclIsUndefined() and rf.reference.containment = true and rf.kind = #ADD
		)
	using {		
	}
	to
		Folder_ref: UfilesystemMM!"filesystem::Folder" (
			name <- rf.value.name,

			contents <- (rf.requiredBy ->select(e | e.reference.name = 'contents'))
		)
}

rule conflictingFolder2uFolder {
	from
		cf: compareMM!Conflict (
			cf.differences.first().value.oclIsTypeOf(UfilesystemMM!Folder) 
			and cf.kind = #REAL
			and if (not cf.differences.first().requires.isEmpty()) 
					then if (not cf.differences.first().requires.first().conflict.oclIsUndefined())
						then cf.differences.first().requires.first().conflict.kind = #REAL else true endif else true endif
		)
	to
		conflicting_Folder: UfilesystemMM!uFolder (
			uleft <- (cf.differences ->select(e | e.source = #LEFT)),
			uright <- (cf.differences ->select(e | e.source = #RIGHT))
		)
}

rule conflictingAttributes2uFolder {
	from
		cf: compareMM!Conflict (
			cf.differences.first().oclIsTypeOf(compareMM!AttributeChange) 
			and cf.kind = #REAL
			and if (not cf.differences.first().refImmediateComposite().left.oclIsUndefined())
				then cf.differences.first().refImmediateComposite().left.oclIsTypeOf(UfilesystemMM!"filesystem::Folder")
				else cf.differences.first().refImmediateComposite().right.oclIsTypeOf(UfilesystemMM!"filesystem::Folder")
				endif
		)
	to
		Folder_attr_conflict: UfilesystemMM!uFolder (
			uleft <- (cf.differences ->select(e | e.source = #LEFT)),
			uright <- (cf.differences ->select(e | e.source = #RIGHT))
		)
}

rule attributeChange2uFolder {
	from 
		ac: compareMM!AttributeChange ( 
				not ac.conflict.oclIsUndefined() 
				and (if (ac.source = #LEFT) 
						then ac.refImmediateComposite().left.oclIsTypeOf(UfilesystemMM!"filesystem::Folder") 
						else ac.refImmediateComposite().right.oclIsTypeOf(UfilesystemMM!"filesystem::Folder") 
						endif) 
		)
	to
		m: UfilesystemMM!"filesystem::Folder" (
			name <- if (ac.source = #LEFT) then ac.refImmediateComposite().left.name else ac.refImmediateComposite().right.name endif
		)
}



rule Shortcut_Match2Shortcut {
	from
		m: compareMM!Match (
				not m.origin.oclIsUndefined() 
			and not m.right.oclIsUndefined() 
			and not m.left.oclIsUndefined() 
			and m.origin.oclIsTypeOf(UfilesystemMM!"filesystem::Shortcut")
			and m.differences.isEmpty()
		)
	using {


			uncertain_target : UfilesystemMM!Shortcut = if (not m.origin.target.oclIsUndefined()) then 
													compareMM!Conflict.allInstances()
														->select(e | e.differences.first().oclIsTypeOf(compareMM!AttributeChange))
															->select(e | e.differences.first().refImmediateComposite().origin.name = m.origin.target.name).first()
												else OclUndefined endif;

			certain_target   : UfilesystemMM!Shortcut = if (not m.origin.target.oclIsUndefined()) then 
													compareMM!Match.allInstances()
														->select(e | not e.origin.oclIsUndefined())
															->select(e | e.origin.oclIsTypeOf(UfilesystemMM!Shortcut))
																->select(e | e.origin.name = m.origin.target.name).first()
												else OclUndefined endif;
	}
	to
		conservative_Shortcut: UfilesystemMM!Shortcut (
			name <- m.origin.name,

			target <- if (not uncertain_target.oclIsUndefined()) then
						       uncertain_target
						   else
							   if (not certain_target.oclIsUndefined()) then
							       certain_target
						       else OclUndefined 
						       endif
						   endif 
		)
}

rule Shortcut_Match2Shortcut_without_subconflicts {
	from
		m: compareMM!Match (
				not m.origin.oclIsUndefined() 
			and not m.right.oclIsUndefined() 
			and not m.left.oclIsUndefined() 
			and m.origin.oclIsTypeOf(UfilesystemMM!"filesystem::Shortcut")
			and not m.differences.isEmpty()
			and if (m.differences ->collect(e | e.conflict)->select(i | not i.oclIsUndefined()).isEmpty()) -- no sub-conflicts on containment relations and on attribute changes
					then true 
					else not (m.differences ->collect(e | e.conflict)
								->select(i | not i.oclIsUndefined())
								->select(e | e.differences.oclIsTypeOf(compareMM!ReferenceChange))
								->exists(i | i.differences.first().reference.containment = true) or not m.differences ->collect(e | e.conflict)
																										->select(i | not i.oclIsUndefined())
																										->select(e | e.differences.first().oclIsTypeOf(compareMM!AttributeChange)).isEmpty())
					endif
		)
	using {		
			attributes_changes   : compareMM!AttributeChange = m.differences ->select(e | e.oclIsTypeOf(compareMM!AttributeChange));
			reference_changes    : compareMM!ReferenceChange = m.differences ->select(e | e.oclIsTypeOf(compareMM!ReferenceChange));
			noContainmentReferences : compareMM!ReferenceChange = m.differences ->select(e | e.oclIsTypeOf(compareMM!ReferenceChange))->select(e | e.reference.containment = false);




			target_ref_changes : compareMM!ReferenceChange = noContainmentReferences ->select(e | e.reference.name = 'target');			
			
	}
	to
		conservative_Shortcut: UfilesystemMM!"filesystem::Shortcut" (
			name <- thisModule.getShortcut_name(m, attributes_changes),

			target <- if (not m.origin.target.oclIsUndefined()) then compareMM!Match.allInstances()->select(e | not e.origin.oclIsUndefined())->select(e | e.origin.oclIsTypeOf(UfilesystemMM!"filesystem::Shortcut"))->select(e | e.origin.name = m.origin.target.name) else OclUndefined endif
		)
}

rule real_referenceChange2Shortcut {
	from 
		rf: compareMM!ReferenceChange (
			rf.value.oclIsTypeOf(UfilesystemMM!"filesystem::Shortcut") 
			and if (not rf.conflict.oclIsUndefined()) then rf.conflict.kind = #REAL else false endif
			and if (not rf.conflict.oclIsUndefined() and not rf.requires.isEmpty()) 
					then if (not rf.requires.first().conflict.oclIsUndefined())
						then rf.requires.first().conflict.kind = #REAL else true endif else true endif
		)
	to
		Shortcut_ref: UfilesystemMM!"filesystem::Shortcut" (
			name <- rf.value.name,

			target <- if (not rf.value.target.oclIsUndefined()) then compareMM!Match.allInstances()->select(e | not e.origin.oclIsUndefined())->select(e | e.origin.oclIsTypeOf(UfilesystemMM!"filesystem::Shortcut"))->select(e | e.origin.name = rf.value.target.name) else OclUndefined endif			
		)
}

rule referenceChange2Shortcut {
	from 
		rf: compareMM!ReferenceChange (
			rf.value.oclIsTypeOf(UfilesystemMM!"filesystem::Shortcut") 
			and rf.conflict.oclIsUndefined() and rf.equivalence.oclIsUndefined() and rf.reference.containment = true and rf.kind = #ADD
		)
	using {		
			target_link : compareMM!ReferenceChange = compareMM!ReferenceChange.allInstances()->select(e | e.reference.name = 'target')->select(e | e.requires.includes(rf)).first();	}
	to
		Shortcut_ref: UfilesystemMM!"filesystem::Shortcut" (
			name <- rf.value.name,

			target <- if (not target_link.oclIsUndefined()) then (target_link.requires->select(e | e.reference.eType = target_link.reference.eType)) else OclUndefined endif
		)
}

rule conflictingShortcut2uShortcut {
	from
		cf: compareMM!Conflict (
			cf.differences.first().value.oclIsTypeOf(UfilesystemMM!Shortcut) 
			and cf.kind = #REAL
			and if (not cf.differences.first().requires.isEmpty()) 
					then if (not cf.differences.first().requires.first().conflict.oclIsUndefined())
						then cf.differences.first().requires.first().conflict.kind = #REAL else true endif else true endif
		)
	to
		conflicting_Shortcut: UfilesystemMM!uShortcut (
			uleft <- (cf.differences ->select(e | e.source = #LEFT)),
			uright <- (cf.differences ->select(e | e.source = #RIGHT))
		)
}

rule conflictingAttributes2uShortcut {
	from
		cf: compareMM!Conflict (
			cf.differences.first().oclIsTypeOf(compareMM!AttributeChange) 
			and cf.kind = #REAL
			and if (not cf.differences.first().refImmediateComposite().left.oclIsUndefined())
				then cf.differences.first().refImmediateComposite().left.oclIsTypeOf(UfilesystemMM!"filesystem::Shortcut")
				else cf.differences.first().refImmediateComposite().right.oclIsTypeOf(UfilesystemMM!"filesystem::Shortcut")
				endif
		)
	to
		Shortcut_attr_conflict: UfilesystemMM!uShortcut (
			uleft <- (cf.differences ->select(e | e.source = #LEFT)),
			uright <- (cf.differences ->select(e | e.source = #RIGHT))
		)
}

rule attributeChange2uShortcut {
	from 
		ac: compareMM!AttributeChange ( 
				not ac.conflict.oclIsUndefined() 
				and (if (ac.source = #LEFT) 
						then ac.refImmediateComposite().left.oclIsTypeOf(UfilesystemMM!"filesystem::Shortcut") 
						else ac.refImmediateComposite().right.oclIsTypeOf(UfilesystemMM!"filesystem::Shortcut") 
						endif) 
		)
	to
		m: UfilesystemMM!"filesystem::Shortcut" (
			name <- if (ac.source = #LEFT) then ac.refImmediateComposite().left.name else ac.refImmediateComposite().right.name endif
		)
}



rule Sync_Match2Sync {
	from
		m: compareMM!Match (
				not m.origin.oclIsUndefined() 
			and not m.right.oclIsUndefined() 
			and not m.left.oclIsUndefined() 
			and m.origin.oclIsTypeOf(UfilesystemMM!"filesystem::Sync")
		)
	using {		
			attributes_changes   : compareMM!AttributeChange = m.differences ->select(e | e.oclIsTypeOf(compareMM!AttributeChange));
			reference_changes    : compareMM!ReferenceChange = m.differences ->select(e | e.oclIsTypeOf(compareMM!ReferenceChange));
			noContainmentReferences : compareMM!ReferenceChange = m.differences ->select(e | e.oclIsTypeOf(compareMM!ReferenceChange))->select(e | e.reference.containment = false);




			source_ref_changes : compareMM!ReferenceChange = noContainmentReferences ->select(e | e.reference.name = 'source');			target_ref_changes : compareMM!ReferenceChange = noContainmentReferences ->select(e | e.reference.name = 'target');			
			
	}
	to
		f: UfilesystemMM!"filesystem::Sync" (
			source <- if (not m.origin.source.oclIsUndefined()) then compareMM!Match.allInstances()->select(e | not e.origin.oclIsUndefined())->select(e | e.origin.oclIsTypeOf(UfilesystemMM!"filesystem::Sync"))->select(e | e.origin.invalid = m.origin.source.first().invalid) else OclUndefined endif,
			target <- if (not m.origin.target.oclIsUndefined()) then compareMM!Match.allInstances()->select(e | not e.origin.oclIsUndefined())->select(e | e.origin.oclIsTypeOf(UfilesystemMM!"filesystem::Sync"))->select(e | e.origin.invalid = m.origin.target.first().invalid) else OclUndefined endif
		)
}

rule referenceChange2Sync {
	from 
		rf: compareMM!ReferenceChange (
			rf.value.oclIsTypeOf(UfilesystemMM!"filesystem::Sync") 
			and rf.conflict.oclIsUndefined()
			and rf.equivalence.oclIsUndefined() 
			and rf.reference.containment = true
		)
	to
		fam: UfilesystemMM!"filesystem::Sync" (
			source <- if (not rf.value.source.oclIsUndefined()) then compareMM!Match.allInstances()->select(e | not e.origin.oclIsUndefined())->select(e | e.origin.oclIsTypeOf(UfilesystemMM!"filesystem::Sync"))->select(e | e.origin.invalid = rf.valuesource.first().invalid) else OclUndefined endif,
			target <- if (not rf.value.target.oclIsUndefined()) then compareMM!Match.allInstances()->select(e | not e.origin.oclIsUndefined())->select(e | e.origin.oclIsTypeOf(UfilesystemMM!"filesystem::Sync"))->select(e | e.origin.invalid = rf.valuetarget.first().invalid) else OclUndefined endif
		)
}



rule File_Match2File {
	from
		m: compareMM!Match (
				not m.origin.oclIsUndefined() 
			and not m.right.oclIsUndefined() 
			and not m.left.oclIsUndefined() 
			and m.origin.oclIsTypeOf(UfilesystemMM!"filesystem::File")
			and m.differences.isEmpty()
		)
	using {


	}
	to
		conservative_File: UfilesystemMM!File (
			name <- m.origin.name


		)
}

rule File_Match2File_without_subconflicts {
	from
		m: compareMM!Match (
				not m.origin.oclIsUndefined() 
			and not m.right.oclIsUndefined() 
			and not m.left.oclIsUndefined() 
			and m.origin.oclIsTypeOf(UfilesystemMM!"filesystem::File")
			and not m.differences.isEmpty()
			and if (m.differences ->collect(e | e.conflict)->select(i | not i.oclIsUndefined()).isEmpty()) -- no sub-conflicts on containment relations and on attribute changes
					then true 
					else not (m.differences ->collect(e | e.conflict)
								->select(i | not i.oclIsUndefined())
								->select(e | e.differences.oclIsTypeOf(compareMM!ReferenceChange))
								->exists(i | i.differences.first().reference.containment = true) or not m.differences ->collect(e | e.conflict)
																										->select(i | not i.oclIsUndefined())
																										->select(e | e.differences.first().oclIsTypeOf(compareMM!AttributeChange)).isEmpty())
					endif
		)
	using {		
			attributes_changes   : compareMM!AttributeChange = m.differences ->select(e | e.oclIsTypeOf(compareMM!AttributeChange));
			reference_changes    : compareMM!ReferenceChange = m.differences ->select(e | e.oclIsTypeOf(compareMM!ReferenceChange));
			noContainmentReferences : compareMM!ReferenceChange = m.differences ->select(e | e.oclIsTypeOf(compareMM!ReferenceChange))->select(e | e.reference.containment = false);




			
			
	}
	to
		conservative_File: UfilesystemMM!"filesystem::File" (
			name <- thisModule.getFile_name(m, attributes_changes)


		)
}

rule real_referenceChange2File {
	from 
		rf: compareMM!ReferenceChange (
			rf.value.oclIsTypeOf(UfilesystemMM!"filesystem::File") 
			and if (not rf.conflict.oclIsUndefined()) then rf.conflict.kind = #REAL else false endif
			and if (not rf.conflict.oclIsUndefined() and not rf.requires.isEmpty()) 
					then if (not rf.requires.first().conflict.oclIsUndefined())
						then rf.requires.first().conflict.kind = #REAL else true endif else true endif
		)
	to
		File_ref: UfilesystemMM!"filesystem::File" (
			name <- rf.value.name

			
		)
}

rule referenceChange2File {
	from 
		rf: compareMM!ReferenceChange (
			rf.value.oclIsTypeOf(UfilesystemMM!"filesystem::File") 
			and rf.conflict.oclIsUndefined() and rf.equivalence.oclIsUndefined() and rf.reference.containment = true and rf.kind = #ADD
		)
	using {		
	}
	to
		File_ref: UfilesystemMM!"filesystem::File" (
			name <- rf.value.name


		)
}

rule conflictingFile2uFile {
	from
		cf: compareMM!Conflict (
			cf.differences.first().value.oclIsTypeOf(UfilesystemMM!File) 
			and cf.kind = #REAL
			and if (not cf.differences.first().requires.isEmpty()) 
					then if (not cf.differences.first().requires.first().conflict.oclIsUndefined())
						then cf.differences.first().requires.first().conflict.kind = #REAL else true endif else true endif
		)
	to
		conflicting_File: UfilesystemMM!uFile (
			uleft <- (cf.differences ->select(e | e.source = #LEFT)),
			uright <- (cf.differences ->select(e | e.source = #RIGHT))
		)
}

rule conflictingAttributes2uFile {
	from
		cf: compareMM!Conflict (
			cf.differences.first().oclIsTypeOf(compareMM!AttributeChange) 
			and cf.kind = #REAL
			and if (not cf.differences.first().refImmediateComposite().left.oclIsUndefined())
				then cf.differences.first().refImmediateComposite().left.oclIsTypeOf(UfilesystemMM!"filesystem::File")
				else cf.differences.first().refImmediateComposite().right.oclIsTypeOf(UfilesystemMM!"filesystem::File")
				endif
		)
	to
		File_attr_conflict: UfilesystemMM!uFile (
			uleft <- (cf.differences ->select(e | e.source = #LEFT)),
			uright <- (cf.differences ->select(e | e.source = #RIGHT))
		)
}

rule attributeChange2uFile {
	from 
		ac: compareMM!AttributeChange ( 
				not ac.conflict.oclIsUndefined() 
				and (if (ac.source = #LEFT) 
						then ac.refImmediateComposite().left.oclIsTypeOf(UfilesystemMM!"filesystem::File") 
						else ac.refImmediateComposite().right.oclIsTypeOf(UfilesystemMM!"filesystem::File") 
						endif) 
		)
	to
		m: UfilesystemMM!"filesystem::File" (
			name <- if (ac.source = #LEFT) then ac.refImmediateComposite().left.name else ac.refImmediateComposite().right.name endif
		)
}



--************************************************************* PSEUDO CONFLICT TO UNCERTAIN **************************************************************--


-- transform "PSEUDO conflicting Drive" 2 uncertain Drive
rule PSEUDOconflictingDrive2uDrive {
	from
		cf: compareMM!Conflict (
			cf.differences.first().value.oclIsTypeOf(UfilesystemMM!"filesystem::Drive")
			and cf.kind = #PSEUDO
			and cf.differences.first().kind = #ADD
			and if (not cf.differences.first().requires.isEmpty()) 
					then if (not cf.differences.first().requires.first().conflict.oclIsUndefined())
						then cf.differences.first().requires.first().conflict.kind = #REAL else true endif else true endif
			and if (cf.differences.first().oclIsTypeOf(compareMM!ReferenceChange)) then cf.differences.first().reference.containment = true else true endif
		)
	to
		conflicting_Drive: UfilesystemMM!uDrive (
			uleft  <- (cf.differences ->select(e | e.source = #LEFT)),
			uright <- (cf.differences ->select(e | e.source = #RIGHT))
		)
}

-- transform "differences of PSEUDO conflicting Drive" 2 left and right Drive
rule pseudo_referenceChange2Drive {
	from 
		rf: compareMM!ReferenceChange (
			rf.value.oclIsTypeOf(UfilesystemMM!"filesystem::Drive")
			and rf.kind = #ADD
			and if (not rf.conflict.oclIsUndefined()) then rf.conflict.kind = #PSEUDO else false endif 
			and if (not rf.conflict.oclIsUndefined() and not rf.requires.isEmpty()) 
					then if (not rf.requires.first().conflict.oclIsUndefined())
						then rf.requires.first().conflict.kind = #REAL else true endif else true endif
			and rf.reference.containment = true
		)
	using {		
			contents : compareMM!ReferenceChange = rf.requiredBy ->select(e | e.oclIsTypeOf(compareMM!ReferenceChange)) ->select(e | e.reference.name = 'contents');
	}
	to
		Drive_ref: UfilesystemMM!"filesystem::Drive" (
			name <- rf.value.name,

			contents <- contents ->collect(e | e.conflict) ->collect(e | if (e.kind = #REAL) then thisModule.subREALConflictingFile2uFile(e) else thisModule.subPSEUDOConflictingFile2uFile(e) endif)			
		)
}

-- transform "conflicting Drive" child of pseudo conflicting families 2 uncertain members (for REAL conflicts)
lazy rule subREALConflictingDrive2uDrive {
	from
		cf: compareMM!Conflict 
	to
		um: UfilesystemMM!uDrive (
			utype  <- #XOR,
			uleft  <- (cf.differences ->select(e | e.source = #LEFT))  ->collect(e | thisModule.subPSEUDOreferenceChange2Drive(e)),
			uright <- (cf.differences ->select(e | e.source = #RIGHT)) ->collect(e | thisModule.subPSEUDOreferenceChange2Drive(e))
		)
}
-- transform "conflicting members" child of pseudo conflicting families 2 uncertain members (for PSEUDO conflicts)
lazy rule subPSEUDOConflictingDrive2uDrive {
	from
		cf: compareMM!Conflict 
	to
		um: UfilesystemMM!uDrive (
			utype  <- #OR,
			uleft  <- (cf.differences ->select(e | e.source = #LEFT))  ->collect(e | thisModule.subPSEUDOreferenceChange2Drive(e)),
			uright <- (cf.differences ->select(e | e.source = #RIGHT)) ->collect(e | thisModule.subPSEUDOreferenceChange2Drive(e))
		)
}

lazy rule subPSEUDOreferenceChange2Drive {
	from 
		rf: compareMM!ReferenceChange 
	using {		
	}
	to
		m: UfilesystemMM!"filesystem::Drive" (
			name <- rf.value.name,

			contents <- (rf.requiredBy ->select(e | e.reference.name = 'contents'))
		)
}


-- transform "PSEUDO conflicting Folder" 2 uncertain Folder
rule PSEUDOconflictingFolder2uFolder {
	from
		cf: compareMM!Conflict (
			cf.differences.first().value.oclIsTypeOf(UfilesystemMM!"filesystem::Folder")
			and cf.kind = #PSEUDO
			and cf.differences.first().kind = #ADD
			and if (not cf.differences.first().requires.isEmpty()) 
					then if (not cf.differences.first().requires.first().conflict.oclIsUndefined())
						then cf.differences.first().requires.first().conflict.kind = #REAL else true endif else true endif
			and if (cf.differences.first().oclIsTypeOf(compareMM!ReferenceChange)) then cf.differences.first().reference.containment = true else true endif
		)
	to
		conflicting_Folder: UfilesystemMM!uFolder (
			uleft  <- (cf.differences ->select(e | e.source = #LEFT)),
			uright <- (cf.differences ->select(e | e.source = #RIGHT))
		)
}

-- transform "differences of PSEUDO conflicting Folder" 2 left and right Folder
rule pseudo_referenceChange2Folder {
	from 
		rf: compareMM!ReferenceChange (
			rf.value.oclIsTypeOf(UfilesystemMM!"filesystem::Folder")
			and rf.kind = #ADD
			and if (not rf.conflict.oclIsUndefined()) then rf.conflict.kind = #PSEUDO else false endif 
			and if (not rf.conflict.oclIsUndefined() and not rf.requires.isEmpty()) 
					then if (not rf.requires.first().conflict.oclIsUndefined())
						then rf.requires.first().conflict.kind = #REAL else true endif else true endif
			and rf.reference.containment = true
		)
	using {		
			contents : compareMM!ReferenceChange = rf.requiredBy ->select(e | e.oclIsTypeOf(compareMM!ReferenceChange)) ->select(e | e.reference.name = 'contents');
	}
	to
		Folder_ref: UfilesystemMM!"filesystem::Folder" (
			name <- rf.value.name,

			contents <- contents ->collect(e | e.conflict) ->collect(e | if (e.kind = #REAL) then thisModule.subREALConflictingFile2uFile(e) else thisModule.subPSEUDOConflictingFile2uFile(e) endif)			
		)
}

-- transform "conflicting Folder" child of pseudo conflicting families 2 uncertain members (for REAL conflicts)
lazy rule subREALConflictingFolder2uFolder {
	from
		cf: compareMM!Conflict 
	to
		um: UfilesystemMM!uFolder (
			utype  <- #XOR,
			uleft  <- (cf.differences ->select(e | e.source = #LEFT))  ->collect(e | thisModule.subPSEUDOreferenceChange2Folder(e)),
			uright <- (cf.differences ->select(e | e.source = #RIGHT)) ->collect(e | thisModule.subPSEUDOreferenceChange2Folder(e))
		)
}
-- transform "conflicting members" child of pseudo conflicting families 2 uncertain members (for PSEUDO conflicts)
lazy rule subPSEUDOConflictingFolder2uFolder {
	from
		cf: compareMM!Conflict 
	to
		um: UfilesystemMM!uFolder (
			utype  <- #OR,
			uleft  <- (cf.differences ->select(e | e.source = #LEFT))  ->collect(e | thisModule.subPSEUDOreferenceChange2Folder(e)),
			uright <- (cf.differences ->select(e | e.source = #RIGHT)) ->collect(e | thisModule.subPSEUDOreferenceChange2Folder(e))
		)
}

lazy rule subPSEUDOreferenceChange2Folder {
	from 
		rf: compareMM!ReferenceChange 
	using {		
	}
	to
		m: UfilesystemMM!"filesystem::Folder" (
			name <- rf.value.name,

			contents <- (rf.requiredBy ->select(e | e.reference.name = 'contents'))
		)
}




-- transform "PSEUDO conflicting Sync" 2 uncertain Sync
rule PSEUDOconflictingSync2uSync {
	from
		cf: compareMM!Conflict (
			cf.differences.first().value.oclIsTypeOf(UfilesystemMM!"filesystem::Sync")
			and cf.kind = #PSEUDO
			and cf.differences.first().kind = #ADD
			and if (not cf.differences.first().requires.isEmpty()) 
					then if (not cf.differences.first().requires.first().conflict.oclIsUndefined())
						then cf.differences.first().requires.first().conflict.kind = #REAL else true endif else true endif
			and if (cf.differences.first().oclIsTypeOf(compareMM!ReferenceChange)) then cf.differences.first().reference.containment = true else true endif
		)
	to
		conflicting_Sync: UfilesystemMM!uSync (
			uleft  <- (cf.differences ->select(e | e.source = #LEFT)),
			uright <- (cf.differences ->select(e | e.source = #RIGHT))
		)
}

-- transform "differences of PSEUDO conflicting Sync" 2 left and right Sync
rule pseudo_referenceChange2Sync {
	from 
		rf: compareMM!ReferenceChange (
			rf.value.oclIsTypeOf(UfilesystemMM!"filesystem::Sync")
			and rf.kind = #ADD
			and if (not rf.conflict.oclIsUndefined()) then rf.conflict.kind = #PSEUDO else false endif 
			and if (not rf.conflict.oclIsUndefined() and not rf.requires.isEmpty()) 
					then if (not rf.requires.first().conflict.oclIsUndefined())
						then rf.requires.first().conflict.kind = #REAL else true endif else true endif
			and rf.reference.containment = true
		)
	using {		



			certain_source   : UfilesystemMM!File = compareMM!Match.allInstances()
																	->select(e | not e.origin.oclIsUndefined())
																		->select(e | e.origin.oclIsKindOf(UfilesystemMM!File))
																			->select(e | rf.requiredBy->select(h | h.reference.name = 'source')->collect(f | f.value)->collect(g | g.name).includes(e.origin.name)).first();

			certain_target   : UfilesystemMM!File = compareMM!Match.allInstances()
																	->select(e | not e.origin.oclIsUndefined())
																		->select(e | e.origin.oclIsKindOf(UfilesystemMM!File))
																			->select(e | rf.requiredBy->select(h | h.reference.name = 'target')->collect(f | f.value)->collect(g | g.name).includes(e.origin.name)).first();
	}
	to
		Sync_ref: UfilesystemMM!"filesystem::Sync" (
			source <- if (not certain_source.oclIsUndefined()) then
							certain_source
						   else
							rf.requiredBy->select(h | h.reference.name = 'source')->collect(i | i.requires)->flatten()->select(o | not o.value.oclIsTypeOf(UfilesystemMM!"filesystem::Sync"))
						   endif,
			target <- if (not certain_target.oclIsUndefined()) then
							certain_target
						   else
							rf.requiredBy->select(h | h.reference.name = 'target')->collect(i | i.requires)->flatten()->select(o | not o.value.oclIsTypeOf(UfilesystemMM!"filesystem::Sync"))
						   endif			
		)
}

-- transform "conflicting Sync" child of pseudo conflicting families 2 uncertain members (for REAL conflicts)
lazy rule subREALConflictingSync2uSync {
	from
		cf: compareMM!Conflict 
	to
		um: UfilesystemMM!uSync (
			utype  <- #XOR,
			uleft  <- (cf.differences ->select(e | e.source = #LEFT))  ->collect(e | thisModule.subPSEUDOreferenceChange2Sync(e)),
			uright <- (cf.differences ->select(e | e.source = #RIGHT)) ->collect(e | thisModule.subPSEUDOreferenceChange2Sync(e))
		)
}
-- transform "conflicting members" child of pseudo conflicting families 2 uncertain members (for PSEUDO conflicts)
lazy rule subPSEUDOConflictingSync2uSync {
	from
		cf: compareMM!Conflict 
	to
		um: UfilesystemMM!uSync (
			utype  <- #OR,
			uleft  <- (cf.differences ->select(e | e.source = #LEFT))  ->collect(e | thisModule.subPSEUDOreferenceChange2Sync(e)),
			uright <- (cf.differences ->select(e | e.source = #RIGHT)) ->collect(e | thisModule.subPSEUDOreferenceChange2Sync(e))
		)
}

lazy rule subPSEUDOreferenceChange2Sync {
	from 
		rf: compareMM!ReferenceChange 
	using {		
			source_link : compareMM!ReferenceChange = compareMM!ReferenceChange.allInstances()->select(e | e.reference.name = 'source')->select(e | e.requires.includes(rf)).first();
			target_link : compareMM!ReferenceChange = compareMM!ReferenceChange.allInstances()->select(e | e.reference.name = 'target')->select(e | e.requires.includes(rf)).first();	}
	to
		m: UfilesystemMM!"filesystem::Sync" (
			source <- if (not source_link.oclIsUndefined()) then (source_link.requires->select(e | e.reference.eType = source_link.reference.eType)) else OclUndefined endif,
			target <- if (not target_link.oclIsUndefined()) then (target_link.requires->select(e | e.reference.eType = target_link.reference.eType)) else OclUndefined endif
		)
}


-- transform "PSEUDO conflicting File" 2 uncertain File
rule PSEUDOconflictingFile2uFile {
	from
		cf: compareMM!Conflict (
			cf.differences.first().value.oclIsTypeOf(UfilesystemMM!"filesystem::File")
			and cf.kind = #PSEUDO
			and cf.differences.first().kind = #ADD
			and if (not cf.differences.first().requires.isEmpty()) 
					then if (not cf.differences.first().requires.first().conflict.oclIsUndefined())
						then cf.differences.first().requires.first().conflict.kind = #REAL else true endif else true endif
			and if (cf.differences.first().oclIsTypeOf(compareMM!ReferenceChange)) then cf.differences.first().reference.containment = true else true endif
		)
	to
		conflicting_File: UfilesystemMM!uFile (
			uleft  <- (cf.differences ->select(e | e.source = #LEFT)),
			uright <- (cf.differences ->select(e | e.source = #RIGHT))
		)
}

-- transform "differences of PSEUDO conflicting File" 2 left and right File
rule pseudo_referenceChange2File {
	from 
		rf: compareMM!ReferenceChange (
			rf.value.oclIsTypeOf(UfilesystemMM!"filesystem::File")
			and rf.kind = #ADD
			and if (not rf.conflict.oclIsUndefined()) then rf.conflict.kind = #PSEUDO else false endif 
			and if (not rf.conflict.oclIsUndefined() and not rf.requires.isEmpty()) 
					then if (not rf.requires.first().conflict.oclIsUndefined())
						then rf.requires.first().conflict.kind = #REAL else true endif else true endif
			and rf.reference.containment = true
		)
	using {		

	}
	to
		File_ref: UfilesystemMM!"filesystem::File" (
			name <- rf.value.name

			
		)
}

-- transform "conflicting File" child of pseudo conflicting families 2 uncertain members (for REAL conflicts)
lazy rule subREALConflictingFile2uFile {
	from
		cf: compareMM!Conflict 
	to
		um: UfilesystemMM!uFile (
			utype  <- #XOR,
			uleft  <- (cf.differences ->select(e | e.source = #LEFT))  ->collect(e | thisModule.subPSEUDOreferenceChange2File(e)),
			uright <- (cf.differences ->select(e | e.source = #RIGHT)) ->collect(e | thisModule.subPSEUDOreferenceChange2File(e))
		)
}
-- transform "conflicting members" child of pseudo conflicting families 2 uncertain members (for PSEUDO conflicts)
lazy rule subPSEUDOConflictingFile2uFile {
	from
		cf: compareMM!Conflict 
	to
		um: UfilesystemMM!uFile (
			utype  <- #OR,
			uleft  <- (cf.differences ->select(e | e.source = #LEFT))  ->collect(e | thisModule.subPSEUDOreferenceChange2File(e)),
			uright <- (cf.differences ->select(e | e.source = #RIGHT)) ->collect(e | thisModule.subPSEUDOreferenceChange2File(e))
		)
}

lazy rule subPSEUDOreferenceChange2File {
	from 
		rf: compareMM!ReferenceChange 
	using {		
	}
	to
		m: UfilesystemMM!"filesystem::File" (
			name <- rf.value.name


		)
}

--************************************************************* PSEUDO CONFLICT TO UNCERTAIN **************************************************************--
